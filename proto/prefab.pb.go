// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.25.3
// source: prefab.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProvidedSource int32

const (
	ProvidedSource_PROVIDED_SOURCE_NOT_SET ProvidedSource = 0
	ProvidedSource_ENV_VAR                 ProvidedSource = 1
)

// Enum value maps for ProvidedSource.
var (
	ProvidedSource_name = map[int32]string{
		0: "PROVIDED_SOURCE_NOT_SET",
		1: "ENV_VAR",
	}
	ProvidedSource_value = map[string]int32{
		"PROVIDED_SOURCE_NOT_SET": 0,
		"ENV_VAR":                 1,
	}
)

func (x ProvidedSource) Enum() *ProvidedSource {
	p := new(ProvidedSource)
	*p = x
	return p
}

func (x ProvidedSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProvidedSource) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[0].Descriptor()
}

func (ProvidedSource) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[0]
}

func (x ProvidedSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProvidedSource.Descriptor instead.
func (ProvidedSource) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{0}
}

type ConfigType int32

const (
	ConfigType_NOT_SET_CONFIG_TYPE ConfigType = 0 // proto null
	ConfigType_CONFIG              ConfigType = 1
	ConfigType_FEATURE_FLAG        ConfigType = 2
	ConfigType_LOG_LEVEL           ConfigType = 3
	ConfigType_SEGMENT             ConfigType = 4
	ConfigType_LIMIT_DEFINITION    ConfigType = 5
	ConfigType_DELETED             ConfigType = 6
)

// Enum value maps for ConfigType.
var (
	ConfigType_name = map[int32]string{
		0: "NOT_SET_CONFIG_TYPE",
		1: "CONFIG",
		2: "FEATURE_FLAG",
		3: "LOG_LEVEL",
		4: "SEGMENT",
		5: "LIMIT_DEFINITION",
		6: "DELETED",
	}
	ConfigType_value = map[string]int32{
		"NOT_SET_CONFIG_TYPE": 0,
		"CONFIG":              1,
		"FEATURE_FLAG":        2,
		"LOG_LEVEL":           3,
		"SEGMENT":             4,
		"LIMIT_DEFINITION":    5,
		"DELETED":             6,
	}
)

func (x ConfigType) Enum() *ConfigType {
	p := new(ConfigType)
	*p = x
	return p
}

func (x ConfigType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigType) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[1].Descriptor()
}

func (ConfigType) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[1]
}

func (x ConfigType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigType.Descriptor instead.
func (ConfigType) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{1}
}

type LogLevel int32

const (
	LogLevel_NOT_SET_LOG_LEVEL LogLevel = 0
	LogLevel_TRACE             LogLevel = 1
	LogLevel_DEBUG             LogLevel = 2
	LogLevel_INFO              LogLevel = 3
	// NOTICE = 4;
	LogLevel_WARN  LogLevel = 5
	LogLevel_ERROR LogLevel = 6
	// CRITICAL = 7;
	// ALERT = 8;
	LogLevel_FATAL LogLevel = 9
)

// Enum value maps for LogLevel.
var (
	LogLevel_name = map[int32]string{
		0: "NOT_SET_LOG_LEVEL",
		1: "TRACE",
		2: "DEBUG",
		3: "INFO",
		5: "WARN",
		6: "ERROR",
		9: "FATAL",
	}
	LogLevel_value = map[string]int32{
		"NOT_SET_LOG_LEVEL": 0,
		"TRACE":             1,
		"DEBUG":             2,
		"INFO":              3,
		"WARN":              5,
		"ERROR":             6,
		"FATAL":             9,
	}
)

func (x LogLevel) Enum() *LogLevel {
	p := new(LogLevel)
	*p = x
	return p
}

func (x LogLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[2].Descriptor()
}

func (LogLevel) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[2]
}

func (x LogLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevel.Descriptor instead.
func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{2}
}

type OnFailure int32

const (
	OnFailure_NOT_SET      OnFailure = 0
	OnFailure_LOG_AND_PASS OnFailure = 1
	OnFailure_LOG_AND_FAIL OnFailure = 2
	OnFailure_THROW        OnFailure = 3
)

// Enum value maps for OnFailure.
var (
	OnFailure_name = map[int32]string{
		0: "NOT_SET",
		1: "LOG_AND_PASS",
		2: "LOG_AND_FAIL",
		3: "THROW",
	}
	OnFailure_value = map[string]int32{
		"NOT_SET":      0,
		"LOG_AND_PASS": 1,
		"LOG_AND_FAIL": 2,
		"THROW":        3,
	}
)

func (x OnFailure) Enum() *OnFailure {
	p := new(OnFailure)
	*p = x
	return p
}

func (x OnFailure) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OnFailure) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[3].Descriptor()
}

func (OnFailure) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[3]
}

func (x OnFailure) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OnFailure.Descriptor instead.
func (OnFailure) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{3}
}

type Config_ValueType int32

const (
	Config_NOT_SET_VALUE_TYPE Config_ValueType = 0 // proto null
	Config_INT                Config_ValueType = 1
	Config_STRING             Config_ValueType = 2
	Config_BYTES              Config_ValueType = 3
	Config_DOUBLE             Config_ValueType = 4
	Config_BOOL               Config_ValueType = 5
	Config_LIMIT_DEFINITION   Config_ValueType = 7
	Config_LOG_LEVEL          Config_ValueType = 9
	Config_STRING_LIST        Config_ValueType = 10
	Config_INT_RANGE          Config_ValueType = 11
	Config_DURATION           Config_ValueType = 12
	Config_JSON               Config_ValueType = 13
)

// Enum value maps for Config_ValueType.
var (
	Config_ValueType_name = map[int32]string{
		0:  "NOT_SET_VALUE_TYPE",
		1:  "INT",
		2:  "STRING",
		3:  "BYTES",
		4:  "DOUBLE",
		5:  "BOOL",
		7:  "LIMIT_DEFINITION",
		9:  "LOG_LEVEL",
		10: "STRING_LIST",
		11: "INT_RANGE",
		12: "DURATION",
		13: "JSON",
	}
	Config_ValueType_value = map[string]int32{
		"NOT_SET_VALUE_TYPE": 0,
		"INT":                1,
		"STRING":             2,
		"BYTES":              3,
		"DOUBLE":             4,
		"BOOL":               5,
		"LIMIT_DEFINITION":   7,
		"LOG_LEVEL":          9,
		"STRING_LIST":        10,
		"INT_RANGE":          11,
		"DURATION":           12,
		"JSON":               13,
	}
)

func (x Config_ValueType) Enum() *Config_ValueType {
	p := new(Config_ValueType)
	*p = x
	return p
}

func (x Config_ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Config_ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[4].Descriptor()
}

func (Config_ValueType) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[4]
}

func (x Config_ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Config_ValueType.Descriptor instead.
func (Config_ValueType) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{11, 0}
}

type Criterion_CriterionOperator int32

const (
	Criterion_NOT_SET                       Criterion_CriterionOperator = 0 // proto null
	Criterion_LOOKUP_KEY_IN                 Criterion_CriterionOperator = 1
	Criterion_LOOKUP_KEY_NOT_IN             Criterion_CriterionOperator = 2
	Criterion_IN_SEG                        Criterion_CriterionOperator = 3
	Criterion_NOT_IN_SEG                    Criterion_CriterionOperator = 4
	Criterion_ALWAYS_TRUE                   Criterion_CriterionOperator = 5
	Criterion_PROP_IS_ONE_OF                Criterion_CriterionOperator = 6
	Criterion_PROP_IS_NOT_ONE_OF            Criterion_CriterionOperator = 7
	Criterion_PROP_ENDS_WITH_ONE_OF         Criterion_CriterionOperator = 8
	Criterion_PROP_DOES_NOT_END_WITH_ONE_OF Criterion_CriterionOperator = 9
	Criterion_HIERARCHICAL_MATCH            Criterion_CriterionOperator = 10
	Criterion_IN_INT_RANGE                  Criterion_CriterionOperator = 11
)

// Enum value maps for Criterion_CriterionOperator.
var (
	Criterion_CriterionOperator_name = map[int32]string{
		0:  "NOT_SET",
		1:  "LOOKUP_KEY_IN",
		2:  "LOOKUP_KEY_NOT_IN",
		3:  "IN_SEG",
		4:  "NOT_IN_SEG",
		5:  "ALWAYS_TRUE",
		6:  "PROP_IS_ONE_OF",
		7:  "PROP_IS_NOT_ONE_OF",
		8:  "PROP_ENDS_WITH_ONE_OF",
		9:  "PROP_DOES_NOT_END_WITH_ONE_OF",
		10: "HIERARCHICAL_MATCH",
		11: "IN_INT_RANGE",
	}
	Criterion_CriterionOperator_value = map[string]int32{
		"NOT_SET":                       0,
		"LOOKUP_KEY_IN":                 1,
		"LOOKUP_KEY_NOT_IN":             2,
		"IN_SEG":                        3,
		"NOT_IN_SEG":                    4,
		"ALWAYS_TRUE":                   5,
		"PROP_IS_ONE_OF":                6,
		"PROP_IS_NOT_ONE_OF":            7,
		"PROP_ENDS_WITH_ONE_OF":         8,
		"PROP_DOES_NOT_END_WITH_ONE_OF": 9,
		"HIERARCHICAL_MATCH":            10,
		"IN_INT_RANGE":                  11,
	}
)

func (x Criterion_CriterionOperator) Enum() *Criterion_CriterionOperator {
	p := new(Criterion_CriterionOperator)
	*p = x
	return p
}

func (x Criterion_CriterionOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Criterion_CriterionOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[5].Descriptor()
}

func (Criterion_CriterionOperator) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[5]
}

func (x Criterion_CriterionOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Criterion_CriterionOperator.Descriptor instead.
func (Criterion_CriterionOperator) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{15, 0}
}

type LimitResponse_LimitPolicyNames int32

const (
	LimitResponse_NOT_SET          LimitResponse_LimitPolicyNames = 0
	LimitResponse_SECONDLY_ROLLING LimitResponse_LimitPolicyNames = 1
	LimitResponse_MINUTELY_ROLLING LimitResponse_LimitPolicyNames = 3
	LimitResponse_HOURLY_ROLLING   LimitResponse_LimitPolicyNames = 5
	LimitResponse_DAILY_ROLLING    LimitResponse_LimitPolicyNames = 7
	LimitResponse_MONTHLY_ROLLING  LimitResponse_LimitPolicyNames = 8
	LimitResponse_INFINITE         LimitResponse_LimitPolicyNames = 9
	LimitResponse_YEARLY_ROLLING   LimitResponse_LimitPolicyNames = 10
)

// Enum value maps for LimitResponse_LimitPolicyNames.
var (
	LimitResponse_LimitPolicyNames_name = map[int32]string{
		0:  "NOT_SET",
		1:  "SECONDLY_ROLLING",
		3:  "MINUTELY_ROLLING",
		5:  "HOURLY_ROLLING",
		7:  "DAILY_ROLLING",
		8:  "MONTHLY_ROLLING",
		9:  "INFINITE",
		10: "YEARLY_ROLLING",
	}
	LimitResponse_LimitPolicyNames_value = map[string]int32{
		"NOT_SET":          0,
		"SECONDLY_ROLLING": 1,
		"MINUTELY_ROLLING": 3,
		"HOURLY_ROLLING":   5,
		"DAILY_ROLLING":    7,
		"MONTHLY_ROLLING":  8,
		"INFINITE":         9,
		"YEARLY_ROLLING":   10,
	}
)

func (x LimitResponse_LimitPolicyNames) Enum() *LimitResponse_LimitPolicyNames {
	p := new(LimitResponse_LimitPolicyNames)
	*p = x
	return p
}

func (x LimitResponse_LimitPolicyNames) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitResponse_LimitPolicyNames) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[6].Descriptor()
}

func (LimitResponse_LimitPolicyNames) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[6]
}

func (x LimitResponse_LimitPolicyNames) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitResponse_LimitPolicyNames.Descriptor instead.
func (LimitResponse_LimitPolicyNames) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{19, 0}
}

type LimitRequest_LimitCombiner int32

const (
	LimitRequest_NOT_SET LimitRequest_LimitCombiner = 0
	LimitRequest_MINIMUM LimitRequest_LimitCombiner = 1
	LimitRequest_MAXIMUM LimitRequest_LimitCombiner = 2
)

// Enum value maps for LimitRequest_LimitCombiner.
var (
	LimitRequest_LimitCombiner_name = map[int32]string{
		0: "NOT_SET",
		1: "MINIMUM",
		2: "MAXIMUM",
	}
	LimitRequest_LimitCombiner_value = map[string]int32{
		"NOT_SET": 0,
		"MINIMUM": 1,
		"MAXIMUM": 2,
	}
)

func (x LimitRequest_LimitCombiner) Enum() *LimitRequest_LimitCombiner {
	p := new(LimitRequest_LimitCombiner)
	*p = x
	return p
}

func (x LimitRequest_LimitCombiner) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitRequest_LimitCombiner) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[7].Descriptor()
}

func (LimitRequest_LimitCombiner) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[7]
}

func (x LimitRequest_LimitCombiner) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitRequest_LimitCombiner.Descriptor instead.
func (LimitRequest_LimitCombiner) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{20, 0}
}

type LimitDefinition_SafetyLevel int32

const (
	LimitDefinition_NOT_SET        LimitDefinition_SafetyLevel = 0
	LimitDefinition_L4_BEST_EFFORT LimitDefinition_SafetyLevel = 4
	LimitDefinition_L5_BOMBPROOF   LimitDefinition_SafetyLevel = 5
)

// Enum value maps for LimitDefinition_SafetyLevel.
var (
	LimitDefinition_SafetyLevel_name = map[int32]string{
		0: "NOT_SET",
		4: "L4_BEST_EFFORT",
		5: "L5_BOMBPROOF",
	}
	LimitDefinition_SafetyLevel_value = map[string]int32{
		"NOT_SET":        0,
		"L4_BEST_EFFORT": 4,
		"L5_BOMBPROOF":   5,
	}
)

func (x LimitDefinition_SafetyLevel) Enum() *LimitDefinition_SafetyLevel {
	p := new(LimitDefinition_SafetyLevel)
	*p = x
	return p
}

func (x LimitDefinition_SafetyLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LimitDefinition_SafetyLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[8].Descriptor()
}

func (LimitDefinition_SafetyLevel) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[8]
}

func (x LimitDefinition_SafetyLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LimitDefinition_SafetyLevel.Descriptor instead.
func (LimitDefinition_SafetyLevel) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{28, 0}
}

type ConfigEvaluationCounter_Reason int32

const (
	ConfigEvaluationCounter_UNKNOWN ConfigEvaluationCounter_Reason = 0
)

// Enum value maps for ConfigEvaluationCounter_Reason.
var (
	ConfigEvaluationCounter_Reason_name = map[int32]string{
		0: "UNKNOWN",
	}
	ConfigEvaluationCounter_Reason_value = map[string]int32{
		"UNKNOWN": 0,
	}
)

func (x ConfigEvaluationCounter_Reason) Enum() *ConfigEvaluationCounter_Reason {
	p := new(ConfigEvaluationCounter_Reason)
	*p = x
	return p
}

func (x ConfigEvaluationCounter_Reason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigEvaluationCounter_Reason) Descriptor() protoreflect.EnumDescriptor {
	return file_prefab_proto_enumTypes[9].Descriptor()
}

func (ConfigEvaluationCounter_Reason) Type() protoreflect.EnumType {
	return &file_prefab_proto_enumTypes[9]
}

func (x ConfigEvaluationCounter_Reason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigEvaluationCounter_Reason.Descriptor instead.
func (ConfigEvaluationCounter_Reason) EnumDescriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{41, 0}
}

type ConfigServicePointer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64 `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	StartAtId    int64 `protobuf:"varint,2,opt,name=start_at_id,json=startAtId,proto3" json:"start_at_id,omitempty"`
	ProjectEnvId int64 `protobuf:"varint,3,opt,name=project_env_id,json=projectEnvId,proto3" json:"project_env_id,omitempty"`
}

func (x *ConfigServicePointer) Reset() {
	*x = ConfigServicePointer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigServicePointer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigServicePointer) ProtoMessage() {}

func (x *ConfigServicePointer) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigServicePointer.ProtoReflect.Descriptor instead.
func (*ConfigServicePointer) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigServicePointer) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *ConfigServicePointer) GetStartAtId() int64 {
	if x != nil {
		return x.StartAtId
	}
	return 0
}

func (x *ConfigServicePointer) GetProjectEnvId() int64 {
	if x != nil {
		return x.ProjectEnvId
	}
	return 0
}

type ConfigValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ConfigValue_Int
	//	*ConfigValue_String_
	//	*ConfigValue_Bytes
	//	*ConfigValue_Double
	//	*ConfigValue_Bool
	//	*ConfigValue_WeightedValues
	//	*ConfigValue_LimitDefinition
	//	*ConfigValue_LogLevel
	//	*ConfigValue_StringList
	//	*ConfigValue_IntRange
	//	*ConfigValue_Provided
	//	*ConfigValue_Duration
	//	*ConfigValue_Json
	Type         isConfigValue_Type `protobuf_oneof:"type"`
	Confidential *bool              `protobuf:"varint,13,opt,name=confidential,proto3,oneof" json:"confidential,omitempty"`                 // don't log or telemetry this value
	DecryptWith  *string            `protobuf:"bytes,14,opt,name=decrypt_with,json=decryptWith,proto3,oneof" json:"decrypt_with,omitempty"` // key name to decrypt with
}

func (x *ConfigValue) Reset() {
	*x = ConfigValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigValue) ProtoMessage() {}

func (x *ConfigValue) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigValue.ProtoReflect.Descriptor instead.
func (*ConfigValue) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{1}
}

func (m *ConfigValue) GetType() isConfigValue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ConfigValue) GetInt() int64 {
	if x, ok := x.GetType().(*ConfigValue_Int); ok {
		return x.Int
	}
	return 0
}

func (x *ConfigValue) GetString_() string {
	if x, ok := x.GetType().(*ConfigValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ConfigValue) GetBytes() []byte {
	if x, ok := x.GetType().(*ConfigValue_Bytes); ok {
		return x.Bytes
	}
	return nil
}

func (x *ConfigValue) GetDouble() float64 {
	if x, ok := x.GetType().(*ConfigValue_Double); ok {
		return x.Double
	}
	return 0
}

func (x *ConfigValue) GetBool() bool {
	if x, ok := x.GetType().(*ConfigValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *ConfigValue) GetWeightedValues() *WeightedValues {
	if x, ok := x.GetType().(*ConfigValue_WeightedValues); ok {
		return x.WeightedValues
	}
	return nil
}

func (x *ConfigValue) GetLimitDefinition() *LimitDefinition {
	if x, ok := x.GetType().(*ConfigValue_LimitDefinition); ok {
		return x.LimitDefinition
	}
	return nil
}

func (x *ConfigValue) GetLogLevel() LogLevel {
	if x, ok := x.GetType().(*ConfigValue_LogLevel); ok {
		return x.LogLevel
	}
	return LogLevel_NOT_SET_LOG_LEVEL
}

func (x *ConfigValue) GetStringList() *StringList {
	if x, ok := x.GetType().(*ConfigValue_StringList); ok {
		return x.StringList
	}
	return nil
}

func (x *ConfigValue) GetIntRange() *IntRange {
	if x, ok := x.GetType().(*ConfigValue_IntRange); ok {
		return x.IntRange
	}
	return nil
}

func (x *ConfigValue) GetProvided() *Provided {
	if x, ok := x.GetType().(*ConfigValue_Provided); ok {
		return x.Provided
	}
	return nil
}

func (x *ConfigValue) GetDuration() *IsoDuration {
	if x, ok := x.GetType().(*ConfigValue_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ConfigValue) GetJson() *Json {
	if x, ok := x.GetType().(*ConfigValue_Json); ok {
		return x.Json
	}
	return nil
}

func (x *ConfigValue) GetConfidential() bool {
	if x != nil && x.Confidential != nil {
		return *x.Confidential
	}
	return false
}

func (x *ConfigValue) GetDecryptWith() string {
	if x != nil && x.DecryptWith != nil {
		return *x.DecryptWith
	}
	return ""
}

type isConfigValue_Type interface {
	isConfigValue_Type()
}

type ConfigValue_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type ConfigValue_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type ConfigValue_Bytes struct {
	Bytes []byte `protobuf:"bytes,3,opt,name=bytes,proto3,oneof"`
}

type ConfigValue_Double struct {
	Double float64 `protobuf:"fixed64,4,opt,name=double,proto3,oneof"`
}

type ConfigValue_Bool struct {
	Bool bool `protobuf:"varint,5,opt,name=bool,proto3,oneof"`
}

type ConfigValue_WeightedValues struct {
	WeightedValues *WeightedValues `protobuf:"bytes,6,opt,name=weighted_values,json=weightedValues,proto3,oneof"`
}

type ConfigValue_LimitDefinition struct {
	LimitDefinition *LimitDefinition `protobuf:"bytes,7,opt,name=limit_definition,json=limitDefinition,proto3,oneof"`
}

type ConfigValue_LogLevel struct {
	LogLevel LogLevel `protobuf:"varint,9,opt,name=log_level,json=logLevel,proto3,enum=prefab.LogLevel,oneof"`
}

type ConfigValue_StringList struct {
	StringList *StringList `protobuf:"bytes,10,opt,name=string_list,json=stringList,proto3,oneof"`
}

type ConfigValue_IntRange struct {
	IntRange *IntRange `protobuf:"bytes,11,opt,name=int_range,json=intRange,proto3,oneof"`
}

type ConfigValue_Provided struct {
	Provided *Provided `protobuf:"bytes,12,opt,name=provided,proto3,oneof"`
}

type ConfigValue_Duration struct {
	Duration *IsoDuration `protobuf:"bytes,15,opt,name=duration,proto3,oneof"`
}

type ConfigValue_Json struct {
	Json *Json `protobuf:"bytes,16,opt,name=json,proto3,oneof"`
}

func (*ConfigValue_Int) isConfigValue_Type() {}

func (*ConfigValue_String_) isConfigValue_Type() {}

func (*ConfigValue_Bytes) isConfigValue_Type() {}

func (*ConfigValue_Double) isConfigValue_Type() {}

func (*ConfigValue_Bool) isConfigValue_Type() {}

func (*ConfigValue_WeightedValues) isConfigValue_Type() {}

func (*ConfigValue_LimitDefinition) isConfigValue_Type() {}

func (*ConfigValue_LogLevel) isConfigValue_Type() {}

func (*ConfigValue_StringList) isConfigValue_Type() {}

func (*ConfigValue_IntRange) isConfigValue_Type() {}

func (*ConfigValue_Provided) isConfigValue_Type() {}

func (*ConfigValue_Duration) isConfigValue_Type() {}

func (*ConfigValue_Json) isConfigValue_Type() {}

type Json struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Json string `protobuf:"bytes,1,opt,name=json,proto3" json:"json,omitempty"`
}

func (x *Json) Reset() {
	*x = Json{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Json) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Json) ProtoMessage() {}

func (x *Json) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Json.ProtoReflect.Descriptor instead.
func (*Json) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{2}
}

func (x *Json) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

type IsoDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definition string `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"` // value is eg P1h30s
}

func (x *IsoDuration) Reset() {
	*x = IsoDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsoDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsoDuration) ProtoMessage() {}

func (x *IsoDuration) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsoDuration.ProtoReflect.Descriptor instead.
func (*IsoDuration) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{3}
}

func (x *IsoDuration) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

type Provided struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *ProvidedSource `protobuf:"varint,1,opt,name=source,proto3,enum=prefab.ProvidedSource,oneof" json:"source,omitempty"`
	Lookup *string         `protobuf:"bytes,2,opt,name=lookup,proto3,oneof" json:"lookup,omitempty"` // eg MY_ENV_VAR
}

func (x *Provided) Reset() {
	*x = Provided{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Provided) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provided) ProtoMessage() {}

func (x *Provided) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provided.ProtoReflect.Descriptor instead.
func (*Provided) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{4}
}

func (x *Provided) GetSource() ProvidedSource {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ProvidedSource_PROVIDED_SOURCE_NOT_SET
}

func (x *Provided) GetLookup() string {
	if x != nil && x.Lookup != nil {
		return *x.Lookup
	}
	return ""
}

type IntRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start *int64 `protobuf:"varint,1,opt,name=start,proto3,oneof" json:"start,omitempty"` // if empty treat as Long.MIN_VALUE. Inclusive
	End   *int64 `protobuf:"varint,2,opt,name=end,proto3,oneof" json:"end,omitempty"`     // if empty treat as Long.MAX_VALUE. Exclusive
}

func (x *IntRange) Reset() {
	*x = IntRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntRange) ProtoMessage() {}

func (x *IntRange) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntRange.ProtoReflect.Descriptor instead.
func (*IntRange) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{5}
}

func (x *IntRange) GetStart() int64 {
	if x != nil && x.Start != nil {
		return *x.Start
	}
	return 0
}

func (x *IntRange) GetEnd() int64 {
	if x != nil && x.End != nil {
		return *x.End
	}
	return 0
}

type StringList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *StringList) Reset() {
	*x = StringList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringList) ProtoMessage() {}

func (x *StringList) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringList.ProtoReflect.Descriptor instead.
func (*StringList) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{6}
}

func (x *StringList) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type WeightedValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight int32        `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"` // out of 1000
	Value  *ConfigValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WeightedValue) Reset() {
	*x = WeightedValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedValue) ProtoMessage() {}

func (x *WeightedValue) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedValue.ProtoReflect.Descriptor instead.
func (*WeightedValue) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{7}
}

func (x *WeightedValue) GetWeight() int32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *WeightedValue) GetValue() *ConfigValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type WeightedValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WeightedValues     []*WeightedValue `protobuf:"bytes,1,rep,name=weighted_values,json=weightedValues,proto3" json:"weighted_values,omitempty"`
	HashByPropertyName *string          `protobuf:"bytes,2,opt,name=hash_by_property_name,json=hashByPropertyName,proto3,oneof" json:"hash_by_property_name,omitempty"`
}

func (x *WeightedValues) Reset() {
	*x = WeightedValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeightedValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeightedValues) ProtoMessage() {}

func (x *WeightedValues) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeightedValues.ProtoReflect.Descriptor instead.
func (*WeightedValues) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{8}
}

func (x *WeightedValues) GetWeightedValues() []*WeightedValue {
	if x != nil {
		return x.WeightedValues
	}
	return nil
}

func (x *WeightedValues) GetHashByPropertyName() string {
	if x != nil && x.HashByPropertyName != nil {
		return *x.HashByPropertyName
	}
	return ""
}

type ApiKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId  *string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3,oneof" json:"key_id,omitempty"`    // numeric currently, but making it string will be more flexible over time
	UserId *string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"` //ditto
}

func (x *ApiKeyMetadata) Reset() {
	*x = ApiKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiKeyMetadata) ProtoMessage() {}

func (x *ApiKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiKeyMetadata.ProtoReflect.Descriptor instead.
func (*ApiKeyMetadata) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{9}
}

func (x *ApiKeyMetadata) GetKeyId() string {
	if x != nil && x.KeyId != nil {
		return *x.KeyId
	}
	return ""
}

func (x *ApiKeyMetadata) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

type Configs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs              []*Config             `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	ConfigServicePointer *ConfigServicePointer `protobuf:"bytes,2,opt,name=config_service_pointer,json=configServicePointer,proto3" json:"config_service_pointer,omitempty"`
	ApikeyMetadata       *ApiKeyMetadata       `protobuf:"bytes,3,opt,name=apikey_metadata,json=apikeyMetadata,proto3,oneof" json:"apikey_metadata,omitempty"`
	DefaultContext       *ContextSet           `protobuf:"bytes,4,opt,name=default_context,json=defaultContext,proto3,oneof" json:"default_context,omitempty"`
	KeepAlive            *bool                 `protobuf:"varint,5,opt,name=keep_alive,json=keepAlive,proto3,oneof" json:"keep_alive,omitempty"`
}

func (x *Configs) Reset() {
	*x = Configs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configs) ProtoMessage() {}

func (x *Configs) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configs.ProtoReflect.Descriptor instead.
func (*Configs) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{10}
}

func (x *Configs) GetConfigs() []*Config {
	if x != nil {
		return x.Configs
	}
	return nil
}

func (x *Configs) GetConfigServicePointer() *ConfigServicePointer {
	if x != nil {
		return x.ConfigServicePointer
	}
	return nil
}

func (x *Configs) GetApikeyMetadata() *ApiKeyMetadata {
	if x != nil {
		return x.ApikeyMetadata
	}
	return nil
}

func (x *Configs) GetDefaultContext() *ContextSet {
	if x != nil {
		return x.DefaultContext
	}
	return nil
}

func (x *Configs) GetKeepAlive() bool {
	if x != nil && x.KeepAlive != nil {
		return *x.KeepAlive
	}
	return false
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId       int64            `protobuf:"varint,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Key             string           `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	ChangedBy       *ChangedBy       `protobuf:"bytes,4,opt,name=changed_by,json=changedBy,proto3" json:"changed_by,omitempty"`
	Rows            []*ConfigRow     `protobuf:"bytes,5,rep,name=rows,proto3" json:"rows,omitempty"`
	AllowableValues []*ConfigValue   `protobuf:"bytes,6,rep,name=allowable_values,json=allowableValues,proto3" json:"allowable_values,omitempty"`
	ConfigType      ConfigType       `protobuf:"varint,7,opt,name=config_type,json=configType,proto3,enum=prefab.ConfigType" json:"config_type,omitempty"`
	DraftId         *int64           `protobuf:"varint,8,opt,name=draft_id,json=draftId,proto3,oneof" json:"draft_id,omitempty"`
	ValueType       Config_ValueType `protobuf:"varint,9,opt,name=value_type,json=valueType,proto3,enum=prefab.Config_ValueType" json:"value_type,omitempty"`
	SendToClientSdk bool             `protobuf:"varint,10,opt,name=send_to_client_sdk,json=sendToClientSdk,proto3" json:"send_to_client_sdk,omitempty"` // default value of a boolean in proto3 is false
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{11}
}

func (x *Config) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Config) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *Config) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Config) GetChangedBy() *ChangedBy {
	if x != nil {
		return x.ChangedBy
	}
	return nil
}

func (x *Config) GetRows() []*ConfigRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *Config) GetAllowableValues() []*ConfigValue {
	if x != nil {
		return x.AllowableValues
	}
	return nil
}

func (x *Config) GetConfigType() ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return ConfigType_NOT_SET_CONFIG_TYPE
}

func (x *Config) GetDraftId() int64 {
	if x != nil && x.DraftId != nil {
		return *x.DraftId
	}
	return 0
}

func (x *Config) GetValueType() Config_ValueType {
	if x != nil {
		return x.ValueType
	}
	return Config_NOT_SET_VALUE_TYPE
}

func (x *Config) GetSendToClientSdk() bool {
	if x != nil {
		return x.SendToClientSdk
	}
	return false
}

type ChangedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId   int64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Email    string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	ApiKeyId string `protobuf:"bytes,3,opt,name=api_key_id,json=apiKeyId,proto3" json:"api_key_id,omitempty"`
}

func (x *ChangedBy) Reset() {
	*x = ChangedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangedBy) ProtoMessage() {}

func (x *ChangedBy) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangedBy.ProtoReflect.Descriptor instead.
func (*ChangedBy) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{12}
}

func (x *ChangedBy) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ChangedBy) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ChangedBy) GetApiKeyId() string {
	if x != nil {
		return x.ApiKeyId
	}
	return ""
}

type ConfigRow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectEnvId *int64                  `protobuf:"varint,1,opt,name=project_env_id,json=projectEnvId,proto3,oneof" json:"project_env_id,omitempty"` // one row per project_env_id
	Values       []*ConditionalValue     `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Properties   map[string]*ConfigValue `protobuf:"bytes,3,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // can store "activated"
}

func (x *ConfigRow) Reset() {
	*x = ConfigRow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRow) ProtoMessage() {}

func (x *ConfigRow) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRow.ProtoReflect.Descriptor instead.
func (*ConfigRow) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigRow) GetProjectEnvId() int64 {
	if x != nil && x.ProjectEnvId != nil {
		return *x.ProjectEnvId
	}
	return 0
}

func (x *ConfigRow) GetValues() []*ConditionalValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ConfigRow) GetProperties() map[string]*ConfigValue {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ConditionalValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Criteria []*Criterion `protobuf:"bytes,1,rep,name=criteria,proto3" json:"criteria,omitempty"` // if all criteria match, then the rule is matched and value is returned
	Value    *ConfigValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConditionalValue) Reset() {
	*x = ConditionalValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalValue) ProtoMessage() {}

func (x *ConditionalValue) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalValue.ProtoReflect.Descriptor instead.
func (*ConditionalValue) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{14}
}

func (x *ConditionalValue) GetCriteria() []*Criterion {
	if x != nil {
		return x.Criteria
	}
	return nil
}

func (x *ConditionalValue) GetValue() *ConfigValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type Criterion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PropertyName string                      `protobuf:"bytes,1,opt,name=property_name,json=propertyName,proto3" json:"property_name,omitempty"`
	Operator     Criterion_CriterionOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=prefab.Criterion_CriterionOperator" json:"operator,omitempty"`
	ValueToMatch *ConfigValue                `protobuf:"bytes,3,opt,name=value_to_match,json=valueToMatch,proto3" json:"value_to_match,omitempty"`
}

func (x *Criterion) Reset() {
	*x = Criterion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Criterion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Criterion) ProtoMessage() {}

func (x *Criterion) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Criterion.ProtoReflect.Descriptor instead.
func (*Criterion) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{15}
}

func (x *Criterion) GetPropertyName() string {
	if x != nil {
		return x.PropertyName
	}
	return ""
}

func (x *Criterion) GetOperator() Criterion_CriterionOperator {
	if x != nil {
		return x.Operator
	}
	return Criterion_NOT_SET
}

func (x *Criterion) GetValueToMatch() *ConfigValue {
	if x != nil {
		return x.ValueToMatch
	}
	return nil
}

type Loggers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loggers      []*Logger `protobuf:"bytes,1,rep,name=loggers,proto3" json:"loggers,omitempty"`
	StartAt      int64     `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt        int64     `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
	InstanceHash string    `protobuf:"bytes,4,opt,name=instance_hash,json=instanceHash,proto3" json:"instance_hash,omitempty"` // random UUID generated on startup - represents the server so we can aggregate
	Namespace    *string   `protobuf:"bytes,5,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
}

func (x *Loggers) Reset() {
	*x = Loggers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loggers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loggers) ProtoMessage() {}

func (x *Loggers) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loggers.ProtoReflect.Descriptor instead.
func (*Loggers) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{16}
}

func (x *Loggers) GetLoggers() []*Logger {
	if x != nil {
		return x.Loggers
	}
	return nil
}

func (x *Loggers) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *Loggers) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

func (x *Loggers) GetInstanceHash() string {
	if x != nil {
		return x.InstanceHash
	}
	return ""
}

func (x *Loggers) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type Logger struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoggerName string `protobuf:"bytes,1,opt,name=logger_name,json=loggerName,proto3" json:"logger_name,omitempty"`
	Traces     *int64 `protobuf:"varint,2,opt,name=traces,proto3,oneof" json:"traces,omitempty"`
	Debugs     *int64 `protobuf:"varint,3,opt,name=debugs,proto3,oneof" json:"debugs,omitempty"`
	Infos      *int64 `protobuf:"varint,4,opt,name=infos,proto3,oneof" json:"infos,omitempty"`
	Warns      *int64 `protobuf:"varint,5,opt,name=warns,proto3,oneof" json:"warns,omitempty"`
	Errors     *int64 `protobuf:"varint,6,opt,name=errors,proto3,oneof" json:"errors,omitempty"`
	Fatals     *int64 `protobuf:"varint,7,opt,name=fatals,proto3,oneof" json:"fatals,omitempty"`
}

func (x *Logger) Reset() {
	*x = Logger{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logger) ProtoMessage() {}

func (x *Logger) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logger.ProtoReflect.Descriptor instead.
func (*Logger) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{17}
}

func (x *Logger) GetLoggerName() string {
	if x != nil {
		return x.LoggerName
	}
	return ""
}

func (x *Logger) GetTraces() int64 {
	if x != nil && x.Traces != nil {
		return *x.Traces
	}
	return 0
}

func (x *Logger) GetDebugs() int64 {
	if x != nil && x.Debugs != nil {
		return *x.Debugs
	}
	return 0
}

func (x *Logger) GetInfos() int64 {
	if x != nil && x.Infos != nil {
		return *x.Infos
	}
	return 0
}

func (x *Logger) GetWarns() int64 {
	if x != nil && x.Warns != nil {
		return *x.Warns
	}
	return 0
}

func (x *Logger) GetErrors() int64 {
	if x != nil && x.Errors != nil {
		return *x.Errors
	}
	return 0
}

func (x *Logger) GetFatals() int64 {
	if x != nil && x.Fatals != nil {
		return *x.Fatals
	}
	return 0
}

type LoggerReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LoggerReportResponse) Reset() {
	*x = LoggerReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggerReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggerReportResponse) ProtoMessage() {}

func (x *LoggerReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggerReportResponse.ProtoReflect.Descriptor instead.
func (*LoggerReportResponse) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{18}
}

type LimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Passed        bool                           `protobuf:"varint,1,opt,name=passed,proto3" json:"passed,omitempty"`
	ExpiresAt     int64                          `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`            // for returnable: rtn this value
	EnforcedGroup string                         `protobuf:"bytes,3,opt,name=enforced_group,json=enforcedGroup,proto3" json:"enforced_group,omitempty"` // events:pageview:homepage:123123
	CurrentBucket int64                          `protobuf:"varint,4,opt,name=current_bucket,json=currentBucket,proto3" json:"current_bucket,omitempty"`
	PolicyGroup   string                         `protobuf:"bytes,5,opt,name=policy_group,json=policyGroup,proto3" json:"policy_group,omitempty"` // events:pageview
	PolicyName    LimitResponse_LimitPolicyNames `protobuf:"varint,6,opt,name=policy_name,json=policyName,proto3,enum=prefab.LimitResponse_LimitPolicyNames" json:"policy_name,omitempty"`
	PolicyLimit   int32                          `protobuf:"varint,7,opt,name=policy_limit,json=policyLimit,proto3" json:"policy_limit,omitempty"`
	Amount        int64                          `protobuf:"varint,8,opt,name=amount,proto3" json:"amount,omitempty"`
	LimitResetAt  int64                          `protobuf:"varint,9,opt,name=limit_reset_at,json=limitResetAt,proto3" json:"limit_reset_at,omitempty"`
	SafetyLevel   LimitDefinition_SafetyLevel    `protobuf:"varint,10,opt,name=safety_level,json=safetyLevel,proto3,enum=prefab.LimitDefinition_SafetyLevel" json:"safety_level,omitempty"`
}

func (x *LimitResponse) Reset() {
	*x = LimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitResponse) ProtoMessage() {}

func (x *LimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitResponse.ProtoReflect.Descriptor instead.
func (*LimitResponse) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{19}
}

func (x *LimitResponse) GetPassed() bool {
	if x != nil {
		return x.Passed
	}
	return false
}

func (x *LimitResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *LimitResponse) GetEnforcedGroup() string {
	if x != nil {
		return x.EnforcedGroup
	}
	return ""
}

func (x *LimitResponse) GetCurrentBucket() int64 {
	if x != nil {
		return x.CurrentBucket
	}
	return 0
}

func (x *LimitResponse) GetPolicyGroup() string {
	if x != nil {
		return x.PolicyGroup
	}
	return ""
}

func (x *LimitResponse) GetPolicyName() LimitResponse_LimitPolicyNames {
	if x != nil {
		return x.PolicyName
	}
	return LimitResponse_NOT_SET
}

func (x *LimitResponse) GetPolicyLimit() int32 {
	if x != nil {
		return x.PolicyLimit
	}
	return 0
}

func (x *LimitResponse) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *LimitResponse) GetLimitResetAt() int64 {
	if x != nil {
		return x.LimitResetAt
	}
	return 0
}

func (x *LimitResponse) GetSafetyLevel() LimitDefinition_SafetyLevel {
	if x != nil {
		return x.SafetyLevel
	}
	return LimitDefinition_NOT_SET
}

type LimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId            int64                       `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AcquireAmount        int32                       `protobuf:"varint,2,opt,name=acquire_amount,json=acquireAmount,proto3" json:"acquire_amount,omitempty"`
	Groups               []string                    `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	LimitCombiner        LimitRequest_LimitCombiner  `protobuf:"varint,4,opt,name=limit_combiner,json=limitCombiner,proto3,enum=prefab.LimitRequest_LimitCombiner" json:"limit_combiner,omitempty"`
	AllowPartialResponse bool                        `protobuf:"varint,5,opt,name=allow_partial_response,json=allowPartialResponse,proto3" json:"allow_partial_response,omitempty"`
	SafetyLevel          LimitDefinition_SafetyLevel `protobuf:"varint,6,opt,name=safety_level,json=safetyLevel,proto3,enum=prefab.LimitDefinition_SafetyLevel" json:"safety_level,omitempty"` // [default = L4_BEST_EFFORT];
}

func (x *LimitRequest) Reset() {
	*x = LimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitRequest) ProtoMessage() {}

func (x *LimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitRequest.ProtoReflect.Descriptor instead.
func (*LimitRequest) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{20}
}

func (x *LimitRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *LimitRequest) GetAcquireAmount() int32 {
	if x != nil {
		return x.AcquireAmount
	}
	return 0
}

func (x *LimitRequest) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *LimitRequest) GetLimitCombiner() LimitRequest_LimitCombiner {
	if x != nil {
		return x.LimitCombiner
	}
	return LimitRequest_NOT_SET
}

func (x *LimitRequest) GetAllowPartialResponse() bool {
	if x != nil {
		return x.AllowPartialResponse
	}
	return false
}

func (x *LimitRequest) GetSafetyLevel() LimitDefinition_SafetyLevel {
	if x != nil {
		return x.SafetyLevel
	}
	return LimitDefinition_NOT_SET
}

// if the same Context type exists, last one wins
type ContextSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Contexts []*Context `protobuf:"bytes,1,rep,name=contexts,proto3" json:"contexts,omitempty"`
}

func (x *ContextSet) Reset() {
	*x = ContextSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextSet) ProtoMessage() {}

func (x *ContextSet) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextSet.ProtoReflect.Descriptor instead.
func (*ContextSet) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{21}
}

func (x *ContextSet) GetContexts() []*Context {
	if x != nil {
		return x.Contexts
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   *string                 `protobuf:"bytes,1,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Values map[string]*ConfigValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{22}
}

func (x *Context) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *Context) GetValues() map[string]*ConfigValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lookup     *string           `protobuf:"bytes,1,opt,name=lookup,proto3,oneof" json:"lookup,omitempty"`
	Attributes map[string]string `protobuf:"bytes,2,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Identity) Reset() {
	*x = Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identity) ProtoMessage() {}

func (x *Identity) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identity.ProtoReflect.Descriptor instead.
func (*Identity) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{23}
}

func (x *Identity) GetLookup() string {
	if x != nil && x.Lookup != nil {
		return *x.Lookup
	}
	return ""
}

func (x *Identity) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type ConfigEvaluationMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConfigRowIndex        *int64            `protobuf:"varint,1,opt,name=config_row_index,json=configRowIndex,proto3,oneof" json:"config_row_index,omitempty"`
	ConditionalValueIndex *int64            `protobuf:"varint,2,opt,name=conditional_value_index,json=conditionalValueIndex,proto3,oneof" json:"conditional_value_index,omitempty"`
	WeightedValueIndex    *int64            `protobuf:"varint,3,opt,name=weighted_value_index,json=weightedValueIndex,proto3,oneof" json:"weighted_value_index,omitempty"`
	Type                  *ConfigType       `protobuf:"varint,4,opt,name=type,proto3,enum=prefab.ConfigType,oneof" json:"type,omitempty"`
	Id                    *int64            `protobuf:"varint,5,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ValueType             *Config_ValueType `protobuf:"varint,6,opt,name=value_type,json=valueType,proto3,enum=prefab.Config_ValueType,oneof" json:"value_type,omitempty"`
}

func (x *ConfigEvaluationMetaData) Reset() {
	*x = ConfigEvaluationMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigEvaluationMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEvaluationMetaData) ProtoMessage() {}

func (x *ConfigEvaluationMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEvaluationMetaData.ProtoReflect.Descriptor instead.
func (*ConfigEvaluationMetaData) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{24}
}

func (x *ConfigEvaluationMetaData) GetConfigRowIndex() int64 {
	if x != nil && x.ConfigRowIndex != nil {
		return *x.ConfigRowIndex
	}
	return 0
}

func (x *ConfigEvaluationMetaData) GetConditionalValueIndex() int64 {
	if x != nil && x.ConditionalValueIndex != nil {
		return *x.ConditionalValueIndex
	}
	return 0
}

func (x *ConfigEvaluationMetaData) GetWeightedValueIndex() int64 {
	if x != nil && x.WeightedValueIndex != nil {
		return *x.WeightedValueIndex
	}
	return 0
}

func (x *ConfigEvaluationMetaData) GetType() ConfigType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ConfigType_NOT_SET_CONFIG_TYPE
}

func (x *ConfigEvaluationMetaData) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *ConfigEvaluationMetaData) GetValueType() Config_ValueType {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return Config_NOT_SET_VALUE_TYPE
}

type ClientConfigValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ClientConfigValue_Int
	//	*ClientConfigValue_String_
	//	*ClientConfigValue_Double
	//	*ClientConfigValue_Bool
	//	*ClientConfigValue_LogLevel
	//	*ClientConfigValue_StringList
	//	*ClientConfigValue_IntRange
	//	*ClientConfigValue_Duration
	//	*ClientConfigValue_Json
	Type                     isClientConfigValue_Type  `protobuf_oneof:"type"`
	ConfigEvaluationMetadata *ConfigEvaluationMetaData `protobuf:"bytes,6,opt,name=config_evaluation_metadata,json=configEvaluationMetadata,proto3,oneof" json:"config_evaluation_metadata,omitempty"`
}

func (x *ClientConfigValue) Reset() {
	*x = ClientConfigValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientConfigValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfigValue) ProtoMessage() {}

func (x *ClientConfigValue) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfigValue.ProtoReflect.Descriptor instead.
func (*ClientConfigValue) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{25}
}

func (m *ClientConfigValue) GetType() isClientConfigValue_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ClientConfigValue) GetInt() int64 {
	if x, ok := x.GetType().(*ClientConfigValue_Int); ok {
		return x.Int
	}
	return 0
}

func (x *ClientConfigValue) GetString_() string {
	if x, ok := x.GetType().(*ClientConfigValue_String_); ok {
		return x.String_
	}
	return ""
}

func (x *ClientConfigValue) GetDouble() float64 {
	if x, ok := x.GetType().(*ClientConfigValue_Double); ok {
		return x.Double
	}
	return 0
}

func (x *ClientConfigValue) GetBool() bool {
	if x, ok := x.GetType().(*ClientConfigValue_Bool); ok {
		return x.Bool
	}
	return false
}

func (x *ClientConfigValue) GetLogLevel() LogLevel {
	if x, ok := x.GetType().(*ClientConfigValue_LogLevel); ok {
		return x.LogLevel
	}
	return LogLevel_NOT_SET_LOG_LEVEL
}

func (x *ClientConfigValue) GetStringList() *StringList {
	if x, ok := x.GetType().(*ClientConfigValue_StringList); ok {
		return x.StringList
	}
	return nil
}

func (x *ClientConfigValue) GetIntRange() *IntRange {
	if x, ok := x.GetType().(*ClientConfigValue_IntRange); ok {
		return x.IntRange
	}
	return nil
}

func (x *ClientConfigValue) GetDuration() *ClientDuration {
	if x, ok := x.GetType().(*ClientConfigValue_Duration); ok {
		return x.Duration
	}
	return nil
}

func (x *ClientConfigValue) GetJson() *Json {
	if x, ok := x.GetType().(*ClientConfigValue_Json); ok {
		return x.Json
	}
	return nil
}

func (x *ClientConfigValue) GetConfigEvaluationMetadata() *ConfigEvaluationMetaData {
	if x != nil {
		return x.ConfigEvaluationMetadata
	}
	return nil
}

type isClientConfigValue_Type interface {
	isClientConfigValue_Type()
}

type ClientConfigValue_Int struct {
	Int int64 `protobuf:"varint,1,opt,name=int,proto3,oneof"`
}

type ClientConfigValue_String_ struct {
	String_ string `protobuf:"bytes,2,opt,name=string,proto3,oneof"`
}

type ClientConfigValue_Double struct {
	Double float64 `protobuf:"fixed64,3,opt,name=double,proto3,oneof"`
}

type ClientConfigValue_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

type ClientConfigValue_LogLevel struct {
	LogLevel LogLevel `protobuf:"varint,5,opt,name=log_level,json=logLevel,proto3,enum=prefab.LogLevel,oneof"`
}

type ClientConfigValue_StringList struct {
	StringList *StringList `protobuf:"bytes,7,opt,name=string_list,json=stringList,proto3,oneof"`
}

type ClientConfigValue_IntRange struct {
	IntRange *IntRange `protobuf:"bytes,8,opt,name=int_range,json=intRange,proto3,oneof"`
}

type ClientConfigValue_Duration struct {
	Duration *ClientDuration `protobuf:"bytes,9,opt,name=duration,proto3,oneof"`
}

type ClientConfigValue_Json struct {
	Json *Json `protobuf:"bytes,10,opt,name=json,proto3,oneof"`
}

func (*ClientConfigValue_Int) isClientConfigValue_Type() {}

func (*ClientConfigValue_String_) isClientConfigValue_Type() {}

func (*ClientConfigValue_Double) isClientConfigValue_Type() {}

func (*ClientConfigValue_Bool) isClientConfigValue_Type() {}

func (*ClientConfigValue_LogLevel) isClientConfigValue_Type() {}

func (*ClientConfigValue_StringList) isClientConfigValue_Type() {}

func (*ClientConfigValue_IntRange) isClientConfigValue_Type() {}

func (*ClientConfigValue_Duration) isClientConfigValue_Type() {}

func (*ClientConfigValue_Json) isClientConfigValue_Type() {}

type ClientDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds    int64  `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"` // the actual time is the sum of these, so 1.5 seconds would be seconds = 1, nanos = 500_000_000
	Nanos      int32  `protobuf:"varint,2,opt,name=nanos,proto3" json:"nanos,omitempty"`
	Definition string `protobuf:"bytes,3,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *ClientDuration) Reset() {
	*x = ClientDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientDuration) ProtoMessage() {}

func (x *ClientDuration) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientDuration.ProtoReflect.Descriptor instead.
func (*ClientDuration) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{26}
}

func (x *ClientDuration) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *ClientDuration) GetNanos() int32 {
	if x != nil {
		return x.Nanos
	}
	return 0
}

func (x *ClientDuration) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

type ConfigEvaluations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values         map[string]*ClientConfigValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApikeyMetadata *ApiKeyMetadata               `protobuf:"bytes,2,opt,name=apikey_metadata,json=apikeyMetadata,proto3,oneof" json:"apikey_metadata,omitempty"`
	DefaultContext *ContextSet                   `protobuf:"bytes,3,opt,name=default_context,json=defaultContext,proto3,oneof" json:"default_context,omitempty"`
}

func (x *ConfigEvaluations) Reset() {
	*x = ConfigEvaluations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigEvaluations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEvaluations) ProtoMessage() {}

func (x *ConfigEvaluations) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEvaluations.ProtoReflect.Descriptor instead.
func (*ConfigEvaluations) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{27}
}

func (x *ConfigEvaluations) GetValues() map[string]*ClientConfigValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ConfigEvaluations) GetApikeyMetadata() *ApiKeyMetadata {
	if x != nil {
		return x.ApikeyMetadata
	}
	return nil
}

func (x *ConfigEvaluations) GetDefaultContext() *ContextSet {
	if x != nil {
		return x.DefaultContext
	}
	return nil
}

type LimitDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyName   LimitResponse_LimitPolicyNames `protobuf:"varint,2,opt,name=policy_name,json=policyName,proto3,enum=prefab.LimitResponse_LimitPolicyNames" json:"policy_name,omitempty"`
	Limit        int32                          `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Burst        int32                          `protobuf:"varint,4,opt,name=burst,proto3" json:"burst,omitempty"`
	AccountId    int64                          `protobuf:"varint,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	LastModified int64                          `protobuf:"varint,6,opt,name=last_modified,json=lastModified,proto3" json:"last_modified,omitempty"`
	Returnable   bool                           `protobuf:"varint,7,opt,name=returnable,proto3" json:"returnable,omitempty"`
	SafetyLevel  LimitDefinition_SafetyLevel    `protobuf:"varint,8,opt,name=safety_level,json=safetyLevel,proto3,enum=prefab.LimitDefinition_SafetyLevel" json:"safety_level,omitempty"` // [default = L4_BEST_EFFORT]; // Overridable by request
}

func (x *LimitDefinition) Reset() {
	*x = LimitDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitDefinition) ProtoMessage() {}

func (x *LimitDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitDefinition.ProtoReflect.Descriptor instead.
func (*LimitDefinition) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{28}
}

func (x *LimitDefinition) GetPolicyName() LimitResponse_LimitPolicyNames {
	if x != nil {
		return x.PolicyName
	}
	return LimitResponse_NOT_SET
}

func (x *LimitDefinition) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LimitDefinition) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

func (x *LimitDefinition) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *LimitDefinition) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *LimitDefinition) GetReturnable() bool {
	if x != nil {
		return x.Returnable
	}
	return false
}

func (x *LimitDefinition) GetSafetyLevel() LimitDefinition_SafetyLevel {
	if x != nil {
		return x.SafetyLevel
	}
	return LimitDefinition_NOT_SET
}

type LimitDefinitions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definitions []*LimitDefinition `protobuf:"bytes,1,rep,name=definitions,proto3" json:"definitions,omitempty"`
}

func (x *LimitDefinitions) Reset() {
	*x = LimitDefinitions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LimitDefinitions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LimitDefinitions) ProtoMessage() {}

func (x *LimitDefinitions) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LimitDefinitions.ProtoReflect.Descriptor instead.
func (*LimitDefinitions) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{29}
}

func (x *LimitDefinitions) GetDefinitions() []*LimitDefinition {
	if x != nil {
		return x.Definitions
	}
	return nil
}

type BufferedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId   int64    `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Method      string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Uri         string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Body        string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	LimitGroups []string `protobuf:"bytes,5,rep,name=limit_groups,json=limitGroups,proto3" json:"limit_groups,omitempty"`
	ContentType string   `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Fifo        bool     `protobuf:"varint,7,opt,name=fifo,proto3" json:"fifo,omitempty"`
}

func (x *BufferedRequest) Reset() {
	*x = BufferedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BufferedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BufferedRequest) ProtoMessage() {}

func (x *BufferedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BufferedRequest.ProtoReflect.Descriptor instead.
func (*BufferedRequest) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{30}
}

func (x *BufferedRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *BufferedRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BufferedRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *BufferedRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *BufferedRequest) GetLimitGroups() []string {
	if x != nil {
		return x.LimitGroups
	}
	return nil
}

func (x *BufferedRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *BufferedRequest) GetFifo() bool {
	if x != nil {
		return x.Fifo
	}
	return false
}

type BatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId      int64    `protobuf:"varint,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	Method         string   `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Uri            string   `protobuf:"bytes,3,opt,name=uri,proto3" json:"uri,omitempty"`
	Body           string   `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	LimitGroups    []string `protobuf:"bytes,5,rep,name=limit_groups,json=limitGroups,proto3" json:"limit_groups,omitempty"`
	BatchTemplate  string   `protobuf:"bytes,6,opt,name=batch_template,json=batchTemplate,proto3" json:"batch_template,omitempty"`
	BatchSeparator string   `protobuf:"bytes,7,opt,name=batch_separator,json=batchSeparator,proto3" json:"batch_separator,omitempty"`
}

func (x *BatchRequest) Reset() {
	*x = BatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRequest) ProtoMessage() {}

func (x *BatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRequest.ProtoReflect.Descriptor instead.
func (*BatchRequest) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{31}
}

func (x *BatchRequest) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *BatchRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *BatchRequest) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *BatchRequest) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *BatchRequest) GetLimitGroups() []string {
	if x != nil {
		return x.LimitGroups
	}
	return nil
}

func (x *BatchRequest) GetBatchTemplate() string {
	if x != nil {
		return x.BatchTemplate
	}
	return ""
}

func (x *BatchRequest) GetBatchSeparator() string {
	if x != nil {
		return x.BatchSeparator
	}
	return ""
}

type BasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *BasicResponse) Reset() {
	*x = BasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicResponse) ProtoMessage() {}

func (x *BasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicResponse.ProtoReflect.Descriptor instead.
func (*BasicResponse) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{32}
}

func (x *BasicResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type CreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NewId   int64  `protobuf:"varint,2,opt,name=new_id,json=newId,proto3" json:"new_id,omitempty"`
}

func (x *CreationResponse) Reset() {
	*x = CreationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreationResponse) ProtoMessage() {}

func (x *CreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreationResponse.ProtoReflect.Descriptor instead.
func (*CreationResponse) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{33}
}

func (x *CreationResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CreationResponse) GetNewId() int64 {
	if x != nil {
		return x.NewId
	}
	return 0
}

type IdBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectEnvId int64  `protobuf:"varint,2,opt,name=project_env_id,json=projectEnvId,proto3" json:"project_env_id,omitempty"`
	SequenceName string `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName,proto3" json:"sequence_name,omitempty"`
	Start        int64  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	End          int64  `protobuf:"varint,5,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *IdBlock) Reset() {
	*x = IdBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdBlock) ProtoMessage() {}

func (x *IdBlock) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdBlock.ProtoReflect.Descriptor instead.
func (*IdBlock) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{34}
}

func (x *IdBlock) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *IdBlock) GetProjectEnvId() int64 {
	if x != nil {
		return x.ProjectEnvId
	}
	return 0
}

func (x *IdBlock) GetSequenceName() string {
	if x != nil {
		return x.SequenceName
	}
	return ""
}

func (x *IdBlock) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *IdBlock) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type IdBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    int64  `protobuf:"varint,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	ProjectEnvId int64  `protobuf:"varint,2,opt,name=project_env_id,json=projectEnvId,proto3" json:"project_env_id,omitempty"`
	SequenceName string `protobuf:"bytes,3,opt,name=sequence_name,json=sequenceName,proto3" json:"sequence_name,omitempty"`
	Size         int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *IdBlockRequest) Reset() {
	*x = IdBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdBlockRequest) ProtoMessage() {}

func (x *IdBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdBlockRequest.ProtoReflect.Descriptor instead.
func (*IdBlockRequest) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{35}
}

func (x *IdBlockRequest) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *IdBlockRequest) GetProjectEnvId() int64 {
	if x != nil {
		return x.ProjectEnvId
	}
	return 0
}

func (x *IdBlockRequest) GetSequenceName() string {
	if x != nil {
		return x.SequenceName
	}
	return ""
}

func (x *IdBlockRequest) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ContextShape struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	FieldTypes map[string]int32 `protobuf:"bytes,2,rep,name=field_types,json=fieldTypes,proto3" json:"field_types,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *ContextShape) Reset() {
	*x = ContextShape{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextShape) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextShape) ProtoMessage() {}

func (x *ContextShape) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextShape.ProtoReflect.Descriptor instead.
func (*ContextShape) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{36}
}

func (x *ContextShape) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ContextShape) GetFieldTypes() map[string]int32 {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

type ContextShapes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shapes    []*ContextShape `protobuf:"bytes,1,rep,name=shapes,proto3" json:"shapes,omitempty"`
	Namespace *string         `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
}

func (x *ContextShapes) Reset() {
	*x = ContextShapes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextShapes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextShapes) ProtoMessage() {}

func (x *ContextShapes) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextShapes.ProtoReflect.Descriptor instead.
func (*ContextShapes) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{37}
}

func (x *ContextShapes) GetShapes() []*ContextShape {
	if x != nil {
		return x.Shapes
	}
	return nil
}

func (x *ContextShapes) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type EvaluatedKeys struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys      []string `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
	Namespace *string  `protobuf:"bytes,2,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
}

func (x *EvaluatedKeys) Reset() {
	*x = EvaluatedKeys{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatedKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedKeys) ProtoMessage() {}

func (x *EvaluatedKeys) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedKeys.ProtoReflect.Descriptor instead.
func (*EvaluatedKeys) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{38}
}

func (x *EvaluatedKeys) GetKeys() []string {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *EvaluatedKeys) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

type EvaluatedConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string       `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ConfigVersion int64        `protobuf:"varint,2,opt,name=config_version,json=configVersion,proto3" json:"config_version,omitempty"`
	Result        *ConfigValue `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	Context       *ContextSet  `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
	Timestamp     int64        `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *EvaluatedConfig) Reset() {
	*x = EvaluatedConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatedConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedConfig) ProtoMessage() {}

func (x *EvaluatedConfig) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedConfig.ProtoReflect.Descriptor instead.
func (*EvaluatedConfig) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{39}
}

func (x *EvaluatedConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EvaluatedConfig) GetConfigVersion() int64 {
	if x != nil {
		return x.ConfigVersion
	}
	return 0
}

func (x *EvaluatedConfig) GetResult() *ConfigValue {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *EvaluatedConfig) GetContext() *ContextSet {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *EvaluatedConfig) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type EvaluatedConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs []*EvaluatedConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *EvaluatedConfigs) Reset() {
	*x = EvaluatedConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvaluatedConfigs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvaluatedConfigs) ProtoMessage() {}

func (x *EvaluatedConfigs) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvaluatedConfigs.ProtoReflect.Descriptor instead.
func (*EvaluatedConfigs) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{40}
}

func (x *EvaluatedConfigs) GetConfigs() []*EvaluatedConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type ConfigEvaluationCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count                 int64                          `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	ConfigId              *int64                         `protobuf:"varint,2,opt,name=config_id,json=configId,proto3,oneof" json:"config_id,omitempty"`
	SelectedIndex         *uint32                        `protobuf:"varint,3,opt,name=selected_index,json=selectedIndex,proto3,oneof" json:"selected_index,omitempty"` // index into the allowed-values list in the config
	SelectedValue         *ConfigValue                   `protobuf:"bytes,4,opt,name=selected_value,json=selectedValue,proto3,oneof" json:"selected_value,omitempty"`
	ConfigRowIndex        *uint32                        `protobuf:"varint,5,opt,name=config_row_index,json=configRowIndex,proto3,oneof" json:"config_row_index,omitempty"`                      // which row matched
	ConditionalValueIndex *uint32                        `protobuf:"varint,6,opt,name=conditional_value_index,json=conditionalValueIndex,proto3,oneof" json:"conditional_value_index,omitempty"` // which ConditionalValue in the row matched?
	WeightedValueIndex    *uint32                        `protobuf:"varint,7,opt,name=weighted_value_index,json=weightedValueIndex,proto3,oneof" json:"weighted_value_index,omitempty"`          // index into the weighted value array
	Reason                ConfigEvaluationCounter_Reason `protobuf:"varint,8,opt,name=reason,proto3,enum=prefab.ConfigEvaluationCounter_Reason" json:"reason,omitempty"`
}

func (x *ConfigEvaluationCounter) Reset() {
	*x = ConfigEvaluationCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigEvaluationCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEvaluationCounter) ProtoMessage() {}

func (x *ConfigEvaluationCounter) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEvaluationCounter.ProtoReflect.Descriptor instead.
func (*ConfigEvaluationCounter) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{41}
}

func (x *ConfigEvaluationCounter) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *ConfigEvaluationCounter) GetConfigId() int64 {
	if x != nil && x.ConfigId != nil {
		return *x.ConfigId
	}
	return 0
}

func (x *ConfigEvaluationCounter) GetSelectedIndex() uint32 {
	if x != nil && x.SelectedIndex != nil {
		return *x.SelectedIndex
	}
	return 0
}

func (x *ConfigEvaluationCounter) GetSelectedValue() *ConfigValue {
	if x != nil {
		return x.SelectedValue
	}
	return nil
}

func (x *ConfigEvaluationCounter) GetConfigRowIndex() uint32 {
	if x != nil && x.ConfigRowIndex != nil {
		return *x.ConfigRowIndex
	}
	return 0
}

func (x *ConfigEvaluationCounter) GetConditionalValueIndex() uint32 {
	if x != nil && x.ConditionalValueIndex != nil {
		return *x.ConditionalValueIndex
	}
	return 0
}

func (x *ConfigEvaluationCounter) GetWeightedValueIndex() uint32 {
	if x != nil && x.WeightedValueIndex != nil {
		return *x.WeightedValueIndex
	}
	return 0
}

func (x *ConfigEvaluationCounter) GetReason() ConfigEvaluationCounter_Reason {
	if x != nil {
		return x.Reason
	}
	return ConfigEvaluationCounter_UNKNOWN
}

type ConfigEvaluationSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      string                     `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Type     ConfigType                 `protobuf:"varint,2,opt,name=type,proto3,enum=prefab.ConfigType" json:"type,omitempty"` // type of config eval
	Counters []*ConfigEvaluationCounter `protobuf:"bytes,3,rep,name=counters,proto3" json:"counters,omitempty"`
}

func (x *ConfigEvaluationSummary) Reset() {
	*x = ConfigEvaluationSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigEvaluationSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEvaluationSummary) ProtoMessage() {}

func (x *ConfigEvaluationSummary) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEvaluationSummary.ProtoReflect.Descriptor instead.
func (*ConfigEvaluationSummary) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{42}
}

func (x *ConfigEvaluationSummary) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ConfigEvaluationSummary) GetType() ConfigType {
	if x != nil {
		return x.Type
	}
	return ConfigType_NOT_SET_CONFIG_TYPE
}

func (x *ConfigEvaluationSummary) GetCounters() []*ConfigEvaluationCounter {
	if x != nil {
		return x.Counters
	}
	return nil
}

type ConfigEvaluationSummaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     int64                      `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End       int64                      `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	Summaries []*ConfigEvaluationSummary `protobuf:"bytes,3,rep,name=summaries,proto3" json:"summaries,omitempty"`
}

func (x *ConfigEvaluationSummaries) Reset() {
	*x = ConfigEvaluationSummaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigEvaluationSummaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigEvaluationSummaries) ProtoMessage() {}

func (x *ConfigEvaluationSummaries) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigEvaluationSummaries.ProtoReflect.Descriptor instead.
func (*ConfigEvaluationSummaries) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{43}
}

func (x *ConfigEvaluationSummaries) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ConfigEvaluationSummaries) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ConfigEvaluationSummaries) GetSummaries() []*ConfigEvaluationSummary {
	if x != nil {
		return x.Summaries
	}
	return nil
}

type LoggersTelemetryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Loggers []*Logger `protobuf:"bytes,1,rep,name=loggers,proto3" json:"loggers,omitempty"`
	StartAt int64     `protobuf:"varint,2,opt,name=start_at,json=startAt,proto3" json:"start_at,omitempty"`
	EndAt   int64     `protobuf:"varint,3,opt,name=end_at,json=endAt,proto3" json:"end_at,omitempty"`
}

func (x *LoggersTelemetryEvent) Reset() {
	*x = LoggersTelemetryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggersTelemetryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggersTelemetryEvent) ProtoMessage() {}

func (x *LoggersTelemetryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggersTelemetryEvent.ProtoReflect.Descriptor instead.
func (*LoggersTelemetryEvent) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{44}
}

func (x *LoggersTelemetryEvent) GetLoggers() []*Logger {
	if x != nil {
		return x.Loggers
	}
	return nil
}

func (x *LoggersTelemetryEvent) GetStartAt() int64 {
	if x != nil {
		return x.StartAt
	}
	return 0
}

func (x *LoggersTelemetryEvent) GetEndAt() int64 {
	if x != nil {
		return x.EndAt
	}
	return 0
}

type TelemetryEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//
	//	*TelemetryEvent_Summaries
	//	*TelemetryEvent_ExampleContexts
	//	*TelemetryEvent_ClientStats
	//	*TelemetryEvent_Loggers
	//	*TelemetryEvent_ContextShapes
	Payload isTelemetryEvent_Payload `protobuf_oneof:"payload"`
}

func (x *TelemetryEvent) Reset() {
	*x = TelemetryEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryEvent) ProtoMessage() {}

func (x *TelemetryEvent) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryEvent.ProtoReflect.Descriptor instead.
func (*TelemetryEvent) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{45}
}

func (m *TelemetryEvent) GetPayload() isTelemetryEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *TelemetryEvent) GetSummaries() *ConfigEvaluationSummaries {
	if x, ok := x.GetPayload().(*TelemetryEvent_Summaries); ok {
		return x.Summaries
	}
	return nil
}

func (x *TelemetryEvent) GetExampleContexts() *ExampleContexts {
	if x, ok := x.GetPayload().(*TelemetryEvent_ExampleContexts); ok {
		return x.ExampleContexts
	}
	return nil
}

func (x *TelemetryEvent) GetClientStats() *ClientStats {
	if x, ok := x.GetPayload().(*TelemetryEvent_ClientStats); ok {
		return x.ClientStats
	}
	return nil
}

func (x *TelemetryEvent) GetLoggers() *LoggersTelemetryEvent {
	if x, ok := x.GetPayload().(*TelemetryEvent_Loggers); ok {
		return x.Loggers
	}
	return nil
}

func (x *TelemetryEvent) GetContextShapes() *ContextShapes {
	if x, ok := x.GetPayload().(*TelemetryEvent_ContextShapes); ok {
		return x.ContextShapes
	}
	return nil
}

type isTelemetryEvent_Payload interface {
	isTelemetryEvent_Payload()
}

type TelemetryEvent_Summaries struct {
	Summaries *ConfigEvaluationSummaries `protobuf:"bytes,2,opt,name=summaries,proto3,oneof"`
}

type TelemetryEvent_ExampleContexts struct {
	ExampleContexts *ExampleContexts `protobuf:"bytes,3,opt,name=example_contexts,json=exampleContexts,proto3,oneof"`
}

type TelemetryEvent_ClientStats struct {
	ClientStats *ClientStats `protobuf:"bytes,4,opt,name=client_stats,json=clientStats,proto3,oneof"`
}

type TelemetryEvent_Loggers struct {
	Loggers *LoggersTelemetryEvent `protobuf:"bytes,5,opt,name=loggers,proto3,oneof"`
}

type TelemetryEvent_ContextShapes struct {
	ContextShapes *ContextShapes `protobuf:"bytes,6,opt,name=context_shapes,json=contextShapes,proto3,oneof"`
}

func (*TelemetryEvent_Summaries) isTelemetryEvent_Payload() {}

func (*TelemetryEvent_ExampleContexts) isTelemetryEvent_Payload() {}

func (*TelemetryEvent_ClientStats) isTelemetryEvent_Payload() {}

func (*TelemetryEvent_Loggers) isTelemetryEvent_Payload() {}

func (*TelemetryEvent_ContextShapes) isTelemetryEvent_Payload() {}

type TelemetryEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceHash string            `protobuf:"bytes,1,opt,name=instance_hash,json=instanceHash,proto3" json:"instance_hash,omitempty"` // random UUID generated on startup - represents the server so we can aggregate
	Events       []*TelemetryEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *TelemetryEvents) Reset() {
	*x = TelemetryEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryEvents) ProtoMessage() {}

func (x *TelemetryEvents) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryEvents.ProtoReflect.Descriptor instead.
func (*TelemetryEvents) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{46}
}

func (x *TelemetryEvents) GetInstanceHash() string {
	if x != nil {
		return x.InstanceHash
	}
	return ""
}

func (x *TelemetryEvents) GetEvents() []*TelemetryEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

type TelemetryEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *TelemetryEventsResponse) Reset() {
	*x = TelemetryEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TelemetryEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TelemetryEventsResponse) ProtoMessage() {}

func (x *TelemetryEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TelemetryEventsResponse.ProtoReflect.Descriptor instead.
func (*TelemetryEventsResponse) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{47}
}

func (x *TelemetryEventsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ExampleContexts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Examples []*ExampleContext `protobuf:"bytes,1,rep,name=examples,proto3" json:"examples,omitempty"`
}

func (x *ExampleContexts) Reset() {
	*x = ExampleContexts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleContexts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleContexts) ProtoMessage() {}

func (x *ExampleContexts) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleContexts.ProtoReflect.Descriptor instead.
func (*ExampleContexts) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{48}
}

func (x *ExampleContexts) GetExamples() []*ExampleContext {
	if x != nil {
		return x.Examples
	}
	return nil
}

type ExampleContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp  int64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	ContextSet *ContextSet `protobuf:"bytes,2,opt,name=contextSet,proto3" json:"contextSet,omitempty"`
}

func (x *ExampleContext) Reset() {
	*x = ExampleContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExampleContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExampleContext) ProtoMessage() {}

func (x *ExampleContext) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExampleContext.ProtoReflect.Descriptor instead.
func (*ExampleContext) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{49}
}

func (x *ExampleContext) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ExampleContext) GetContextSet() *ContextSet {
	if x != nil {
		return x.ContextSet
	}
	return nil
}

type ClientStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start             int64  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End               int64  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	DroppedEventCount uint64 `protobuf:"varint,3,opt,name=dropped_event_count,json=droppedEventCount,proto3" json:"dropped_event_count,omitempty"`
}

func (x *ClientStats) Reset() {
	*x = ClientStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_prefab_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientStats) ProtoMessage() {}

func (x *ClientStats) ProtoReflect() protoreflect.Message {
	mi := &file_prefab_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientStats.ProtoReflect.Descriptor instead.
func (*ClientStats) Descriptor() ([]byte, []int) {
	return file_prefab_proto_rawDescGZIP(), []int{50}
}

func (x *ClientStats) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *ClientStats) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *ClientStats) GetDroppedEventCount() uint64 {
	if x != nil {
		return x.DroppedEventCount
	}
	return 0
}

var File_prefab_proto protoreflect.FileDescriptor

var file_prefab_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x22, 0x7b, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x76, 0x49, 0x64, 0x22, 0xa7, 0x05, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x16, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x41, 0x0a, 0x0f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0e, 0x77, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61,
	0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6e,
	0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x49, 0x73, 0x6f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22,
	0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x64,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x22, 0x1a, 0x0a,
	0x04, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x22, 0x2d, 0x0a, 0x0b, 0x49, 0x73, 0x6f,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x72, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22, 0x4e, 0x0a, 0x08,
	0x49, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x01, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x65, 0x6e, 0x64, 0x22, 0x24, 0x0a, 0x0a,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x22, 0x52, 0x0a, 0x0d, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x0e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0f, 0x77, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x15, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x68, 0x61, 0x73, 0x68,
	0x42, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x18, 0x0a, 0x16, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x0e, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0xea, 0x02, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x12, 0x28, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x2e, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48,
	0x00, 0x52, 0x0e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65,
	0x74, 0x48, 0x01, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x09, 0x6b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76,
	0x65, 0x22, 0xe3, 0x04, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x42, 0x79, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x25, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x77,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x3e, 0x0a, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52,
	0x07, 0x64, 0x72, 0x61, 0x66, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x64, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x64,
	0x6b, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c,
	0x45, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x05, 0x12, 0x14, 0x0a,
	0x10, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45,
	0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0c,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x0d, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x64,
	0x72, 0x61, 0x66, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x58, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x77, 0x12,
	0x29, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x45, 0x6e, 0x76, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x6f, 0x77, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a,
	0x52, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x22, 0x6c, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x72,
	0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x63, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61,
	0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x09, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x2e, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x39, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x6f, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x8b, 0x02, 0x0a, 0x11, 0x43, 0x72, 0x69, 0x74, 0x65, 0x72, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54,
	0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50,
	0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x4f, 0x4f,
	0x4b, 0x55, 0x50, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x53, 0x45, 0x47, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x05, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x10,
	0x06, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x45, 0x4e, 0x44, 0x53, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4f, 0x4e, 0x45, 0x5f,
	0x4f, 0x46, 0x10, 0x08, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x4f, 0x45,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4f,
	0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x49, 0x45, 0x52, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x0a, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x0b, 0x22, 0xbb, 0x01, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x21,
	0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x93, 0x02, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x06, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x05, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x77, 0x61, 0x72, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x03, 0x52, 0x05, 0x77, 0x61, 0x72, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x06, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x66, 0x61, 0x74, 0x61,
	0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48, 0x05, 0x52, 0x06, 0x66, 0x61, 0x74, 0x61,
	0x6c, 0x73, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64, 0x65, 0x62, 0x75, 0x67, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x73, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x73, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x61, 0x74, 0x61, 0x6c, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd5, 0x04,
	0x0a, 0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x64, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x64, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x74, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x73, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x10, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x4c, 0x59, 0x5f, 0x52, 0x4f,
	0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x4f, 0x55, 0x52, 0x4c,
	0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x44,
	0x41, 0x49, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x13,
	0x0a, 0x0f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e,
	0x47, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x45, 0x10,
	0x09, 0x12, 0x12, 0x0a, 0x0e, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x5f, 0x52, 0x4f, 0x4c, 0x4c,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x22, 0xed, 0x02, 0x0a, 0x0c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x49, 0x0a, 0x0e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f,
	0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72,
	0x52, 0x0d, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x52, 0x0b, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x36, 0x0a,
	0x0d, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x0b,
	0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4d,
	0x49, 0x4e, 0x49, 0x4d, 0x55, 0x4d, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x58, 0x49,
	0x4d, 0x55, 0x4d, 0x10, 0x02, 0x22, 0x39, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x22, 0xb0, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4e, 0x0a, 0x0b, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65,
	0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x1b, 0x0a, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x22, 0xa6, 0x03, 0x0a, 0x18, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x02, 0x52, 0x12, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x48, 0x04, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x1a,
	0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x05, 0x0a, 0x03,
	0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xf0, 0x03, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x2f, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f,
	0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x34, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x63, 0x0a, 0x1a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x48,
	0x01, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x41,
	0x70, 0x69, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52,
	0x0e, 0x61, 0x70, 0x69, 0x6b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x74, 0x48,
	0x01, 0x52, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x88, 0x01, 0x01, 0x1a, 0x54, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x61,
	0x70, 0x69, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0xf4, 0x02, 0x0a, 0x0f, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x46, 0x0a, 0x0c, 0x73, 0x61, 0x66, 0x65, 0x74, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x61, 0x66, 0x65, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0b, 0x73, 0x61, 0x66, 0x65,
	0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x40, 0x0a, 0x0b, 0x53, 0x61, 0x66, 0x65, 0x74,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45,
	0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x34, 0x5f, 0x42, 0x45, 0x53, 0x54, 0x5f, 0x45,
	0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x35, 0x5f, 0x42, 0x4f,
	0x4d, 0x42, 0x50, 0x52, 0x4f, 0x4f, 0x46, 0x10, 0x05, 0x22, 0x4d, 0x0a, 0x10, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a,
	0x0b, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x0f, 0x42, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x69, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x66,
	0x69, 0x66, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x29, 0x0a, 0x0d, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x43, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6e, 0x65, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x65, 0x77, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x49, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x45, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x0e, 0x49, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x76, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53,
	0x68, 0x61, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0x3d, 0x0a, 0x0f, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e,
	0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12,
	0x2c, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x54,
	0x0a, 0x0d, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x45, 0x0a, 0x10, 0x45, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x31,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x65, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x22, 0xb6, 0x04, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52,
	0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x3f, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x02,
	0x52, 0x0d, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x6f, 0x77,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x17, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x04, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x35,
	0x0a, 0x14, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x05, 0x52, 0x12,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x15, 0x0a, 0x06, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x42, 0x0c, 0x0a, 0x0a,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x73,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x13, 0x0a, 0x11, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x6f, 0x77, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x65, 0x64, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x82, 0x01,
	0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x65, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x73, 0x0a, 0x15, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x54, 0x65, 0x6c,
	0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x6c,
	0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x65, 0x6e, 0x64, 0x41, 0x74, 0x22, 0xd9, 0x02, 0x0a, 0x0e, 0x54, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x76, 0x61,
	0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62,
	0x2e, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x65, 0x66,
	0x61, 0x62, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x48, 0x00,
	0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x67, 0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0x66, 0x0a, 0x0f, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x54, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x33, 0x0a, 0x17, 0x54,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x45, 0x0a, 0x0f, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e, 0x45,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x08, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x62, 0x0a, 0x0e, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x53, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x65, 0x66, 0x61, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x53, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x0b, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x64, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x2a, 0x3a, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x44,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x4e, 0x56, 0x5f, 0x56, 0x41, 0x52, 0x10, 0x01, 0x2a, 0x82,
	0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x13, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4c,
	0x41, 0x47, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x5f, 0x4c, 0x45, 0x56, 0x45,
	0x4c, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x45, 0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x06, 0x2a, 0x61, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x4c,
	0x45, 0x56, 0x45, 0x4c, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x05,
	0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x46,
	0x41, 0x54, 0x41, 0x4c, 0x10, 0x09, 0x2a, 0x47, 0x0a, 0x09, 0x4f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x45, 0x54, 0x10, 0x00,
	0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x50, 0x41, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x4f, 0x47, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x48, 0x52, 0x4f, 0x57, 0x10, 0x03, 0x42,
	0x4c, 0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2e,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x42, 0x06, 0x50, 0x72, 0x65, 0x66, 0x61, 0x62, 0x5a, 0x2d,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x61,
	0x62, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x70, 0x72, 0x65, 0x66, 0x61, 0x62, 0x2d, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_prefab_proto_rawDescOnce sync.Once
	file_prefab_proto_rawDescData = file_prefab_proto_rawDesc
)

func file_prefab_proto_rawDescGZIP() []byte {
	file_prefab_proto_rawDescOnce.Do(func() {
		file_prefab_proto_rawDescData = protoimpl.X.CompressGZIP(file_prefab_proto_rawDescData)
	})
	return file_prefab_proto_rawDescData
}

var file_prefab_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_prefab_proto_msgTypes = make([]protoimpl.MessageInfo, 56)
var file_prefab_proto_goTypes = []interface{}{
	(ProvidedSource)(0),                 // 0: prefab.ProvidedSource
	(ConfigType)(0),                     // 1: prefab.ConfigType
	(LogLevel)(0),                       // 2: prefab.LogLevel
	(OnFailure)(0),                      // 3: prefab.OnFailure
	(Config_ValueType)(0),               // 4: prefab.Config.ValueType
	(Criterion_CriterionOperator)(0),    // 5: prefab.Criterion.CriterionOperator
	(LimitResponse_LimitPolicyNames)(0), // 6: prefab.LimitResponse.LimitPolicyNames
	(LimitRequest_LimitCombiner)(0),     // 7: prefab.LimitRequest.LimitCombiner
	(LimitDefinition_SafetyLevel)(0),    // 8: prefab.LimitDefinition.SafetyLevel
	(ConfigEvaluationCounter_Reason)(0), // 9: prefab.ConfigEvaluationCounter.Reason
	(*ConfigServicePointer)(nil),        // 10: prefab.ConfigServicePointer
	(*ConfigValue)(nil),                 // 11: prefab.ConfigValue
	(*Json)(nil),                        // 12: prefab.Json
	(*IsoDuration)(nil),                 // 13: prefab.IsoDuration
	(*Provided)(nil),                    // 14: prefab.Provided
	(*IntRange)(nil),                    // 15: prefab.IntRange
	(*StringList)(nil),                  // 16: prefab.StringList
	(*WeightedValue)(nil),               // 17: prefab.WeightedValue
	(*WeightedValues)(nil),              // 18: prefab.WeightedValues
	(*ApiKeyMetadata)(nil),              // 19: prefab.ApiKeyMetadata
	(*Configs)(nil),                     // 20: prefab.Configs
	(*Config)(nil),                      // 21: prefab.Config
	(*ChangedBy)(nil),                   // 22: prefab.ChangedBy
	(*ConfigRow)(nil),                   // 23: prefab.ConfigRow
	(*ConditionalValue)(nil),            // 24: prefab.ConditionalValue
	(*Criterion)(nil),                   // 25: prefab.Criterion
	(*Loggers)(nil),                     // 26: prefab.Loggers
	(*Logger)(nil),                      // 27: prefab.Logger
	(*LoggerReportResponse)(nil),        // 28: prefab.LoggerReportResponse
	(*LimitResponse)(nil),               // 29: prefab.LimitResponse
	(*LimitRequest)(nil),                // 30: prefab.LimitRequest
	(*ContextSet)(nil),                  // 31: prefab.ContextSet
	(*Context)(nil),                     // 32: prefab.Context
	(*Identity)(nil),                    // 33: prefab.Identity
	(*ConfigEvaluationMetaData)(nil),    // 34: prefab.ConfigEvaluationMetaData
	(*ClientConfigValue)(nil),           // 35: prefab.ClientConfigValue
	(*ClientDuration)(nil),              // 36: prefab.ClientDuration
	(*ConfigEvaluations)(nil),           // 37: prefab.ConfigEvaluations
	(*LimitDefinition)(nil),             // 38: prefab.LimitDefinition
	(*LimitDefinitions)(nil),            // 39: prefab.LimitDefinitions
	(*BufferedRequest)(nil),             // 40: prefab.BufferedRequest
	(*BatchRequest)(nil),                // 41: prefab.BatchRequest
	(*BasicResponse)(nil),               // 42: prefab.BasicResponse
	(*CreationResponse)(nil),            // 43: prefab.CreationResponse
	(*IdBlock)(nil),                     // 44: prefab.IdBlock
	(*IdBlockRequest)(nil),              // 45: prefab.IdBlockRequest
	(*ContextShape)(nil),                // 46: prefab.ContextShape
	(*ContextShapes)(nil),               // 47: prefab.ContextShapes
	(*EvaluatedKeys)(nil),               // 48: prefab.EvaluatedKeys
	(*EvaluatedConfig)(nil),             // 49: prefab.EvaluatedConfig
	(*EvaluatedConfigs)(nil),            // 50: prefab.EvaluatedConfigs
	(*ConfigEvaluationCounter)(nil),     // 51: prefab.ConfigEvaluationCounter
	(*ConfigEvaluationSummary)(nil),     // 52: prefab.ConfigEvaluationSummary
	(*ConfigEvaluationSummaries)(nil),   // 53: prefab.ConfigEvaluationSummaries
	(*LoggersTelemetryEvent)(nil),       // 54: prefab.LoggersTelemetryEvent
	(*TelemetryEvent)(nil),              // 55: prefab.TelemetryEvent
	(*TelemetryEvents)(nil),             // 56: prefab.TelemetryEvents
	(*TelemetryEventsResponse)(nil),     // 57: prefab.TelemetryEventsResponse
	(*ExampleContexts)(nil),             // 58: prefab.ExampleContexts
	(*ExampleContext)(nil),              // 59: prefab.ExampleContext
	(*ClientStats)(nil),                 // 60: prefab.ClientStats
	nil,                                 // 61: prefab.ConfigRow.PropertiesEntry
	nil,                                 // 62: prefab.Context.ValuesEntry
	nil,                                 // 63: prefab.Identity.AttributesEntry
	nil,                                 // 64: prefab.ConfigEvaluations.ValuesEntry
	nil,                                 // 65: prefab.ContextShape.FieldTypesEntry
}
var file_prefab_proto_depIdxs = []int32{
	18, // 0: prefab.ConfigValue.weighted_values:type_name -> prefab.WeightedValues
	38, // 1: prefab.ConfigValue.limit_definition:type_name -> prefab.LimitDefinition
	2,  // 2: prefab.ConfigValue.log_level:type_name -> prefab.LogLevel
	16, // 3: prefab.ConfigValue.string_list:type_name -> prefab.StringList
	15, // 4: prefab.ConfigValue.int_range:type_name -> prefab.IntRange
	14, // 5: prefab.ConfigValue.provided:type_name -> prefab.Provided
	13, // 6: prefab.ConfigValue.duration:type_name -> prefab.IsoDuration
	12, // 7: prefab.ConfigValue.json:type_name -> prefab.Json
	0,  // 8: prefab.Provided.source:type_name -> prefab.ProvidedSource
	11, // 9: prefab.WeightedValue.value:type_name -> prefab.ConfigValue
	17, // 10: prefab.WeightedValues.weighted_values:type_name -> prefab.WeightedValue
	21, // 11: prefab.Configs.configs:type_name -> prefab.Config
	10, // 12: prefab.Configs.config_service_pointer:type_name -> prefab.ConfigServicePointer
	19, // 13: prefab.Configs.apikey_metadata:type_name -> prefab.ApiKeyMetadata
	31, // 14: prefab.Configs.default_context:type_name -> prefab.ContextSet
	22, // 15: prefab.Config.changed_by:type_name -> prefab.ChangedBy
	23, // 16: prefab.Config.rows:type_name -> prefab.ConfigRow
	11, // 17: prefab.Config.allowable_values:type_name -> prefab.ConfigValue
	1,  // 18: prefab.Config.config_type:type_name -> prefab.ConfigType
	4,  // 19: prefab.Config.value_type:type_name -> prefab.Config.ValueType
	24, // 20: prefab.ConfigRow.values:type_name -> prefab.ConditionalValue
	61, // 21: prefab.ConfigRow.properties:type_name -> prefab.ConfigRow.PropertiesEntry
	25, // 22: prefab.ConditionalValue.criteria:type_name -> prefab.Criterion
	11, // 23: prefab.ConditionalValue.value:type_name -> prefab.ConfigValue
	5,  // 24: prefab.Criterion.operator:type_name -> prefab.Criterion.CriterionOperator
	11, // 25: prefab.Criterion.value_to_match:type_name -> prefab.ConfigValue
	27, // 26: prefab.Loggers.loggers:type_name -> prefab.Logger
	6,  // 27: prefab.LimitResponse.policy_name:type_name -> prefab.LimitResponse.LimitPolicyNames
	8,  // 28: prefab.LimitResponse.safety_level:type_name -> prefab.LimitDefinition.SafetyLevel
	7,  // 29: prefab.LimitRequest.limit_combiner:type_name -> prefab.LimitRequest.LimitCombiner
	8,  // 30: prefab.LimitRequest.safety_level:type_name -> prefab.LimitDefinition.SafetyLevel
	32, // 31: prefab.ContextSet.contexts:type_name -> prefab.Context
	62, // 32: prefab.Context.values:type_name -> prefab.Context.ValuesEntry
	63, // 33: prefab.Identity.attributes:type_name -> prefab.Identity.AttributesEntry
	1,  // 34: prefab.ConfigEvaluationMetaData.type:type_name -> prefab.ConfigType
	4,  // 35: prefab.ConfigEvaluationMetaData.value_type:type_name -> prefab.Config.ValueType
	2,  // 36: prefab.ClientConfigValue.log_level:type_name -> prefab.LogLevel
	16, // 37: prefab.ClientConfigValue.string_list:type_name -> prefab.StringList
	15, // 38: prefab.ClientConfigValue.int_range:type_name -> prefab.IntRange
	36, // 39: prefab.ClientConfigValue.duration:type_name -> prefab.ClientDuration
	12, // 40: prefab.ClientConfigValue.json:type_name -> prefab.Json
	34, // 41: prefab.ClientConfigValue.config_evaluation_metadata:type_name -> prefab.ConfigEvaluationMetaData
	64, // 42: prefab.ConfigEvaluations.values:type_name -> prefab.ConfigEvaluations.ValuesEntry
	19, // 43: prefab.ConfigEvaluations.apikey_metadata:type_name -> prefab.ApiKeyMetadata
	31, // 44: prefab.ConfigEvaluations.default_context:type_name -> prefab.ContextSet
	6,  // 45: prefab.LimitDefinition.policy_name:type_name -> prefab.LimitResponse.LimitPolicyNames
	8,  // 46: prefab.LimitDefinition.safety_level:type_name -> prefab.LimitDefinition.SafetyLevel
	38, // 47: prefab.LimitDefinitions.definitions:type_name -> prefab.LimitDefinition
	65, // 48: prefab.ContextShape.field_types:type_name -> prefab.ContextShape.FieldTypesEntry
	46, // 49: prefab.ContextShapes.shapes:type_name -> prefab.ContextShape
	11, // 50: prefab.EvaluatedConfig.result:type_name -> prefab.ConfigValue
	31, // 51: prefab.EvaluatedConfig.context:type_name -> prefab.ContextSet
	49, // 52: prefab.EvaluatedConfigs.configs:type_name -> prefab.EvaluatedConfig
	11, // 53: prefab.ConfigEvaluationCounter.selected_value:type_name -> prefab.ConfigValue
	9,  // 54: prefab.ConfigEvaluationCounter.reason:type_name -> prefab.ConfigEvaluationCounter.Reason
	1,  // 55: prefab.ConfigEvaluationSummary.type:type_name -> prefab.ConfigType
	51, // 56: prefab.ConfigEvaluationSummary.counters:type_name -> prefab.ConfigEvaluationCounter
	52, // 57: prefab.ConfigEvaluationSummaries.summaries:type_name -> prefab.ConfigEvaluationSummary
	27, // 58: prefab.LoggersTelemetryEvent.loggers:type_name -> prefab.Logger
	53, // 59: prefab.TelemetryEvent.summaries:type_name -> prefab.ConfigEvaluationSummaries
	58, // 60: prefab.TelemetryEvent.example_contexts:type_name -> prefab.ExampleContexts
	60, // 61: prefab.TelemetryEvent.client_stats:type_name -> prefab.ClientStats
	54, // 62: prefab.TelemetryEvent.loggers:type_name -> prefab.LoggersTelemetryEvent
	47, // 63: prefab.TelemetryEvent.context_shapes:type_name -> prefab.ContextShapes
	55, // 64: prefab.TelemetryEvents.events:type_name -> prefab.TelemetryEvent
	59, // 65: prefab.ExampleContexts.examples:type_name -> prefab.ExampleContext
	31, // 66: prefab.ExampleContext.contextSet:type_name -> prefab.ContextSet
	11, // 67: prefab.ConfigRow.PropertiesEntry.value:type_name -> prefab.ConfigValue
	11, // 68: prefab.Context.ValuesEntry.value:type_name -> prefab.ConfigValue
	35, // 69: prefab.ConfigEvaluations.ValuesEntry.value:type_name -> prefab.ClientConfigValue
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_prefab_proto_init() }
func file_prefab_proto_init() {
	if File_prefab_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_prefab_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigServicePointer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Json); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsoDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Provided); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeightedValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Criterion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loggers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logger); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggerReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigEvaluationMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientConfigValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigEvaluations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LimitDefinitions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BufferedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextShape); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextShapes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatedKeys); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatedConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvaluatedConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigEvaluationCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigEvaluationSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigEvaluationSummaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggersTelemetryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TelemetryEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleContexts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExampleContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_prefab_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_prefab_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ConfigValue_Int)(nil),
		(*ConfigValue_String_)(nil),
		(*ConfigValue_Bytes)(nil),
		(*ConfigValue_Double)(nil),
		(*ConfigValue_Bool)(nil),
		(*ConfigValue_WeightedValues)(nil),
		(*ConfigValue_LimitDefinition)(nil),
		(*ConfigValue_LogLevel)(nil),
		(*ConfigValue_StringList)(nil),
		(*ConfigValue_IntRange)(nil),
		(*ConfigValue_Provided)(nil),
		(*ConfigValue_Duration)(nil),
		(*ConfigValue_Json)(nil),
	}
	file_prefab_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[13].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[22].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[23].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[24].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*ClientConfigValue_Int)(nil),
		(*ClientConfigValue_String_)(nil),
		(*ClientConfigValue_Double)(nil),
		(*ClientConfigValue_Bool)(nil),
		(*ClientConfigValue_LogLevel)(nil),
		(*ClientConfigValue_StringList)(nil),
		(*ClientConfigValue_IntRange)(nil),
		(*ClientConfigValue_Duration)(nil),
		(*ClientConfigValue_Json)(nil),
	}
	file_prefab_proto_msgTypes[27].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[38].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[41].OneofWrappers = []interface{}{}
	file_prefab_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*TelemetryEvent_Summaries)(nil),
		(*TelemetryEvent_ExampleContexts)(nil),
		(*TelemetryEvent_ClientStats)(nil),
		(*TelemetryEvent_Loggers)(nil),
		(*TelemetryEvent_ContextShapes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_prefab_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   56,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_prefab_proto_goTypes,
		DependencyIndexes: file_prefab_proto_depIdxs,
		EnumInfos:         file_prefab_proto_enumTypes,
		MessageInfos:      file_prefab_proto_msgTypes,
	}.Build()
	File_prefab_proto = out.File
	file_prefab_proto_rawDesc = nil
	file_prefab_proto_goTypes = nil
	file_prefab_proto_depIdxs = nil
}
